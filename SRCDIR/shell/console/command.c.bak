/*
 * command.c
 *
 *  Created on: 2014-8-8
 *      Author: jubian
 */
#include "stdio.h"
#include "command.h"
#include "config.h"
#include "shellconsole.h"
#include "string.h"

#ifndef CONFIG_SYS_HELP_CMD_WIDTH
#define CONFIG_SYS_HELP_CMD_WIDTH	8
#endif

extern cmd_tbl_t  cmd_table[];
extern cmd_tbl_t cmd_netshell_table[];
cmd_tbl_t* boot_cmd_start=&cmd_table[0];
cmd_tbl_t* boot_cmd_end =&cmd_table[CONFIG_SYS_CMDSIZE-1];
cmd_tbl_t* boot_netshellcmd_start=&cmd_netshell_table[0];
cmd_tbl_t* boot_netshellcmd_end =&cmd_netshell_table[CONFIG_SYS_CMDSIZE-1];


s32 cpustrcmp(const s8 * cs,const s8 * ct)
{
	register s8 __res;

	while (1) {
		if ((__res = *cs - *ct++) != 0 || !*cs++)
			break;
	}

	return __res;
}


/***************************************************************************
 * find command table entry for a command
 ***************************************************************************/
cmd_tbl_t *find_cmd_tbl (const s8 *cmd, cmd_tbl_t *table, s32 table_len)
{
	cmd_tbl_t *cmdtp;
	cmd_tbl_t *cmdtp_temp = table;	/*Init value */
	const s8 *p;
	s32 len;
	s32 n_found = 0;

	/*
	 * Some commands allow length modifiers (like "cp.b");
	 * compare command name only until first dot.
	 */

	len = ((p = strchr(cmd, '.')) == NULL) ? strlen (cmd) : (p - cmd);

	for (cmdtp = table;
	     cmdtp != table + table_len;
	     cmdtp++) {
		if(0==strcmp(cmdtp->name,"END"))
			break;
		if (strncmp (cmd, cmdtp->name, len) == 0) {
			if (len == strlen (cmdtp->name))
				return cmdtp;	/* full match */

			cmdtp_temp = cmdtp;	/* abbreviated command ? */
			n_found++;
		}
	}
	if (n_found == 1) {			/* exactly one match */
		return cmdtp_temp;
	}

	return NULL;	/* not found or ambiguous command */
}

/****************************************************************************/
cmd_tbl_t *find_cmd (const s8 *cmd)
{
	s32 len =(boot_cmd_end - boot_cmd_start);
	return find_cmd_tbl(cmd,boot_cmd_start, len);
//       s32 len=group_size;
//      return find_cmd_tbl(cmd,group_start, len);
}

/****************************************************************************/
cmd_tbl_t *find_netshell_cmd (const s8 *cmd)
{
	s32 len =(boot_netshellcmd_end - boot_netshellcmd_start);
	return find_cmd_tbl(cmd,boot_netshellcmd_start, len);
//       s32 len=group_size;
//      return find_cmd_tbl(cmd,group_start, len);
}

s32 cmd_usage(cmd_tbl_t *cmdtp)
{
	shellprintf("%s - %s\n\n", cmdtp->name, cmdtp->usage);

#ifdef	CONFIG_SYS_LONGHELP
	shellprintf("Usage:\n%s ", cmdtp->name);

	if (!cmdtp->help) {
		shellputs ("- No additional help available.\n");
		return 1;
	}

	shellputs (cmdtp->help);
	shellputc ('\n');
#endif	/* CONFIG_SYS_LONGHELP */
	return 1;
}

cmd_tbl_t *cmd_array[CONFIG_SYS_CMDSIZE];
/****************************************************************************/
s32 _do_help (cmd_tbl_t *cmd_start, s32 cmd_items, cmd_tbl_t * cmdtp, s32
	      flag, s32 argc, s8 * const argv[])
{
	s32 i;
	s32 rcode = 0;
	s32 actcmditem=0;

	if (argc == 1) {	/*show list of commands */

		s32 i, j, swaps;

		/* Make array of commands from .uboot_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
			cmd_array[i] = cmdtp++;
			if(0!=strcmp(cmd_array[i]->name,"END"))
				actcmditem++;
			else
				break;
		}

        shellprintf("item=0x%x \n",actcmditem);
		/* Sort command list (trivial bubble sort) */
		for (i = actcmditem - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_array[j]->name,
					    cmd_array[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_array[j];
					cmd_array[j] = cmd_array[j + 1];
					cmd_array[j + 1] = tmp;
					++swaps;
				}
			}
			if (!swaps)
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < actcmditem; i++) {
			const s8 *usage = cmd_array[i]->usage;

			/* allow user abort */
			if (ctrlc ())
				return 1;
			if (usage == NULL)
				continue;
			shellprintf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
			       cmd_array[i]->name, usage);
		}
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
			rcode |= cmd_usage(cmdtp);
		} else {
			shellprintf ("Unknown command '%s' - try 'help'"
				" without arguments for list of all"
				" known commands\n\n", argv[i]
					);
			rcode = 1;
		}
	}
	return rcode;
}


s32 do_help(cmd_tbl_t * cmdtp, s32 flag, s32 argc, s8 * const argv[])
{
	return _do_help(boot_cmd_start,
	//		(boot_cmd_end - boot_cmd_start)/(sizeof(cmd_tbl_t)),
			(boot_cmd_end - boot_cmd_start),
			cmdtp, flag, argc, argv);
}

cmd_tbl_t *cmd_netshellarray[CONFIG_SYS_CMDSIZE];

/****************************************************************************/
s32 _do_netshellhelp (cmd_tbl_t *cmd_start, s32 cmd_items, cmd_tbl_t * cmdtp, s32
	      flag, s32 argc, s8 * const argv[])
{
	s32 i;
	s32 rcode = 0;
	s32 actcmditem=0;
       shellprintf("argc=0x%x,cmd_items=0x%x\n",argc,cmd_items);
	if (argc == 1) {	/*show list of commands */

		s32 i, j, swaps;

		/* Make array of commands from .uboot_cmd section */
		cmdtp = cmd_start;
		for (i = 0; i < cmd_items; i++) {
			cmd_netshellarray[i] = cmdtp++;
			if(0!=strcmp(cmd_netshellarray[i]->name,"END"))
				actcmditem++;
			else
				break;
		}

        shellprintf("_do_netshellhelp item=0x%x \n",actcmditem);
		/* Sort command list (trivial bubble sort) */
		for (i = actcmditem - 1; i > 0; --i) {
			swaps = 0;
			for (j = 0; j < i; ++j) {
				if (strcmp (cmd_netshellarray[j]->name,
					    cmd_netshellarray[j + 1]->name) > 0) {
					cmd_tbl_t *tmp;
					tmp = cmd_netshellarray[j];
					cmd_netshellarray[j] = cmd_netshellarray[j + 1];
					cmd_netshellarray[j + 1] = tmp;
					++swaps;
				}
			}
			if (!swaps)
				break;
		}

		/* print short help (usage) */
		for (i = 0; i < actcmditem; i++) {
			const s8 *usage = cmd_netshellarray[i]->usage;

			/* allow user abort */
			if (ctrlc ())
				return 1;
			if (usage == NULL)
				continue;
			shellprintf("%-*s- %s\n", CONFIG_SYS_HELP_CMD_WIDTH,
			       cmd_netshellarray[i]->name, usage);
		}

	}
		return 0;
	}
	/*
	 * command help (long version)
	 */
	for (i = 1; i < argc; ++i) {
		if ((cmdtp = find_cmd_tbl (argv[i], cmd_start, cmd_items )) != NULL) {
			rcode |= cmd_usage(cmdtp);
		} else {
			shellprintf ("Unknown command '%s' - try 'help'"
				" without arguments for list of all"
				" known commands\n\n", argv[i]
					);
			rcode = 1;
		}
	}
	return rcode;
}


s32 do_netshellhelp(cmd_tbl_t * cmdtp, s32 flag, s32 argc, s8 * const argv[])
{
	return _do_netshellhelp(boot_netshellcmd_start,
	//		(boot_cmd_end - boot_cmd_start)/(sizeof(cmd_tbl_t)),
			(boot_netshellcmd_end - boot_netshellcmd_start),
			cmdtp, flag, argc, argv);
}


s32 do_nothing(cmd_tbl_t * cmdtp, s32 flag, s32 argc, s8 * const argv[])
{
	return 0;
}


s32 cmd_get_data_size(s8* arg, s32 default_size)
{
	/* Check for a size specification .b, .w or .l.
	 */
	s32 len = strlen(arg);
	if (len > 2 && arg[len-2] == '.') {
		switch(arg[len-1]) {
		case 'b':
			return 1;
		case 'w':
			return 2;
		case 'l':
			return 4;
		case 's':
			return -2;
		default:
			return -1;
		}
	}
	return default_size;
}


